<template>
  <view class="container">
    <view class="list-btn" bindtap="openList">
      <image class="btn-icon" src="/images/more/issue.png"></image>
      <text class="btn-text">我的反馈记录（{{list.count}}次）</text>
      <view class="btn-open">
        <image class="btn-open-img" src="/images/core/common/{{list.status ? 'up' : 'down'}}.png"></image>
      </view>
    </view>
    <view class="issues-list" wx:if="{{list.status}}">
      <block wx:if="{{list.count}}">
        <view wx:for="{{list.data}}" wx:key="id" class="issues-item {{index == list.open ? '' : 'close'}}" data-index="{{index}}" bindtap="openItem">
          <view class="item-hd">
            <text class="btn-id">#{{item.isId}}</text>
            <block wx:if="{{index == list.open}}">
              <!-- <view class="item-labels">
                <text wx:for="{{item.content.labels}}" wx:key="id" wx:for-item="label" class="item-label">{{label.name}}</text>
              </view> -->
              <text class="item-status" wx:if="{{item.state == 'closed'}}">已解决</text>
              <text class="item-status" wx:elif="{{item.state == 'open'}}">进行中</text>
            </block>
          </view>
          <text class="btn-text">{{item.title}}</text>
          <view class="btn-open" wx:if="{{index != list.open}}">
            <image class="btn-open-img" src="/images/core/common/down.png"></image>
          </view>
          <view class="item-bd" wx:else>
            <text class="item-content">{{item_remind ? item_remind : item.body}}</text>
            <!-- <view class="item-comment" wx:for="{{item.comments}}" wx:key="id" wx:for-item="comment">
              <image class="item-comment-img" src="{{comment.user.avatar_url}}"></image>
              <view class="item-comment-bd">
                <text class="item-comment-name">{{comment.user.login}}</text>
                <text>{{comment.body}}</text>
              </view>
            </view> -->
          </view>
        </view>
      </block>
      <text class="issues-remind text-center">{{list_remind}}</text>
    </view>
    <block wx:else>
      <!-- 反馈内容 -->
      <text class="issues-label">新建反馈</text>
      <view class="issues-panel">
        <view class="issues-input {{(showError&&!title)?'error':''}}">
          <input placeholder="请输入反馈标题" bindinput="listenerTitle" />
        </view>
        <textarea class="issues-textarea {{(showError&&!content)?'error':''}}" cursor-spacing="50" placeholder="请输入反馈内容" bindinput="listenerTextarea"></textarea>
      </view>
      <!-- 图片上传 -->
      <block wx:if="{{upload}}">
        <text class="issues-label">选择图片（可选）</text>
        <view class="issues-img-panel {{(showError&&uploading)?'error':''}}">
          <view class="issues-photo-item" wx:if="{{uploading}}">
            <image class="remind-img" src="/images/index/loading.gif"></image>
          </view>
          <view class="issues-photo-item add-photo" wx:else bindtap="choosePhoto"></view>
          <view class="issues-photo-item" wx:for="{{imgs}}" wx:key="*this">
            <image src="{{item}}?imageView2/2/w/250/interlace/1/q/88" mode="aspectFill" data-index="{{index}}" bindtap="previewPhoto"></image>
          </view>
        </view>
      </block>

      <text class="issues-remind"> 您的反馈将会发到广科学习平台的后台，我们在看到您的后台后会及时回复，您可以在反馈页面进行查询;另外你还可以加入用户反馈群进行反馈。 注:频繁恶意反馈的用户将会取消其反馈资格。
      </text>
      <view class="submit-btn {{uploading?'disabled':''}}" bindtap="submit">
        <text>提交反馈</text>
      </view>
    </block>
  </view>
</template>

<script>
import wepy from "wepy";
import apis from "../../config/apis";
import configs from "../../config";
export default class Issue extends wepy.page {
  data = {
    list_remind: '加载中...',
    list: {
      count: "-",
      status: false,
      data: [],
      open: 0
    },
    title: "",
    content: "",
    info: "",
    imgs: [],
    imgLen: 0,
    upload: false,
    uploading: false,
    qiniu: "",
    showError: false,
  };
  // 获取用户手机信息跟token
  async onLoad() {
    if (apis.g_status) {
      return;
    }
    let networkType = await wepy.getNetworkType(),
      sysInfo = {},
      token = {},
      reply = {};
    console.log(networkType);
    if (networkType) {
      sysInfo = await wepy.getSystemInfo();
      console.log(sysInfo);
      if (sysInfo) {
        let info = "---\r\n**用户信息**\r\n";
        info += "用户名：" + apis._user.wx.nickName;
        if (apis._user.is_bind) {
          info +=
            "（" +
            "-" +
            apis._user.myInfo.stuName +
            "-" +
            apis._user.myInfo.stuStudentid +
            "）";
        }
        info += "\r\n手机型号：" + sysInfo.model;
        info +=
          "（" +
          sysInfo.platform +
          " - " +
          sysInfo.windowWidth +
          "x" +
          sysInfo.windowHeight +
          "）";
        info += "\r\n微信版本号：" + sysInfo.version;
        info += "\r\n小程序版本号：" + apis.version;
        info += "\r\n基础库版本：" + sysInfo.SDKVersion;
        info += "\r\n网络类型：" + networkType.networkType;
        // console.log(info);
        this.info = info;
        this.$apply();
        // console.log(this.info);
      }
    }
    reply = await wepy.request({
      url: `${apis._server}/learningsystem/Issues/queryIssues`,
      method: 'GET',
      data: {
        openid: apis._user.openid
      }
    })
    console.log(reply)
    try {
      if (reply.statusCode === 200) {
        let list = reply.data.data;
        if (list && list.length) {
          this.list.count = list.length;
          this.list.data = list;
          this.list_remind = '';
          this.$apply();
        } else {
          this.list_remind = "暂无反馈记录";
          this.list.count = 0;
          this.$apply();
        }
      } 
    } catch (e) {
      this.list_remind = "加载失败";
      this.$apply();
    } finally {
      wepy.hideNavigationBarLoading();
    }
    token = await wepy.request({
      url: `${apis._server}/learningsystem/Qiniu/getUploadToken`,
      method: "GET",
      data: {
        fileType: "img",
        fileUse: "issue"
      }
    });
    // console.log(token)
    if (token.statusCode === 200) {
      console.log(token);
      this.upload = true;
      this.qiniu = token.data.data.token;
      this.$apply();
      console.log(this);
    }
  }
  // 打开列表
  openList() {
    if (this.list.count) {
      this.list.status = !this.list.status;
      this.$apply();
    }
  }
  // 选择图片上传
  async choosePhoto() {
    let chooseConfirm = {},
      chooseImg = {},
      _this = this;
    chooseConfirm = await wepy.showModal({
      title: "提示",
      content: "上传图片需要消耗流量，是否继续？",
      confirmText: "继续"
    });
    if (chooseConfirm.confirm) {
      // console.log(chooseConfirm.confirm);
      chooseImg = await wepy.chooseImage({
        count: 4,
        sourceType: ["album"]
      });
      // console.log(chooseImg)
      if (chooseImg) {
        let tempFilePaths = chooseImg.tempFilePaths,
          imgLen = tempFilePaths.length;
        this.uploading = true;
        this.imgLen = this.imgLen + imgLen;
        this.$apply();
        tempFilePaths.forEach(function(e) {
          _this.uploadImg(e);
          console.log(e);
          console.log(this);
        });
      }
    }
  }
  // 上传单张图片到七牛
  async uploadImg(path) {
    if (apis.g_status) {
      apis.showErrorModal(apis.g_status, "上传失败");
      return;
    }
    console.log(path);
    let imgurl = {};
    wepy.showNavigationBarLoading();
    imgurl = await wepy.uploadFile({
      url: "https://upload-z2.qbox.me",
      header: {
        "Content-Type": "multipart/form-data"
      },
      filePath: path,
      name: "file",
      formData: {
        token: this.qiniu
      }
    });
    console.log(imgurl);
    try {
      if (imgurl) {
        console.log(JSON.parse(imgurl.data));
        let imgUrl = JSON.parse(imgurl.data),
          trueUrl = `http://p328nzenm.bkt.clouddn.com/${imgUrl.key}`;
        if (this.imgs.indexOf(trueUrl) == -1) {
          this.imgs.push(trueUrl);
        } else {
          configs.showErrorModal('不能传两张一样的图片哦!', '温馨提示');
          this.imgLen -= 1;
          this.uploading = false;
          this.$apply();
        }
        this.$apply();
        console.log(this.imgs);
      }
      if (this.imgs.length === this.imgLen) {
        this.uploading = false;
        this.$apply();
        console.log(this.uploading)
      }
    } catch (e) {
      this.uploading = false;
      this.imgLen = this.imgLen - 1;
      this.$apply();
    } finally {
      wepy.hideNavigationBarLoading();
    }
  }
  listenerTitle(e) {
    this.title = e.detail.value;
    this.$apply();
    // console.log(this.title)
  }
  listenerTextarea(e) {
    this.content = e.detail.value;
    this.$apply();
    console.log(this.content);
  }
  // 提交反馈
  async submit() {
    let title = '', content = '', imgs = '';
    if (!this.title || !this.content) {
      configs.showErrorModal("标题和内容不能为空", "温馨提示");
      return false;
    }
    if (this.uploading) {
      configs.showErrorModal("请等待图片上传完毕再提交", "温馨提示");
      return false;
    }
    if (apis.g_status) {
      apis.showErrorModal(apis.g_status, "失败");
      return;
    }
    let submitConfirm = {},
      submitInfo = {};
    submitConfirm = await wepy.showModal({
      title: "提示",
      content: "是否确认提交反馈?"
    });

    if (submitConfirm.confirm) {
      // console.log(submitConfirm.confirm)
      title = `【${apis._user.wx.nickName}】 ${this.title}`;
      content = `${this.content}\r\n\r\n`;
      submitInfo = await wepy.request({
        url: `${apis._server}/learningsystem/Issues/submitIssues`,
        method: "POST",
        header: {
          "content-type": "application/x-www-form-urlencoded"
        },
        data: {
          openid: apis._user.openid,
          title: this.title,
          body: this.content,
          details: this.info,
          img_url: this.imgs
        }
      });
      await configs.showLoadToast("正在提交");
      if (submitInfo.statusCode == 200) {
        await wepy.showToast({
          title: '提交成功',
          icon: 'success',
          duration: 1500
        })
        // console.log(a)
        await wepy.navigateBack();
      } else {
        console.log(submitInfo.statusCode)
        configs.showErrorModal(submitInfo.errMsg, "提交失败");
      }
      console.log(submitInfo);
    }
  }
  // 预览图片
  previewPhoto(e) {
    if(this.uploading){
      configs.showErrorModal('正在上传图片', '预览失败');
      return false;
    }
    wepy.previewImage({
      current: this.imgs[e.target.dataset.index],
      urls: this.imgs
    })
  }

  getIssue(index) {
    let thedata = this.list.data[index];
    // console.log(thedata);
    if (!thedata.content) {
      this.item_remind = "加载中";
      this.$apply();
    } else {
      return ;
    }
    // wepy.showNavigationBarLoading();
  }
  openItem(e) {
    // console.log(e.currentTarget.dataset.index)
    let index = e.currentTarget.dataset.index,
      list = this.list;
    console.log(this.list.data)
    if(index != list.open) {
      this.getIssue(index);
      this.list.open = index;
      this.$apply();
    }
  }
}
</script>

<style lang="less">
.container {
  background-color: #f6f6f6;
  padding: 0;
  padding-top: 30rpx;
  font-size: 11pt;
  box-sizing: border-box;
}
.list-btn {
  align-items: center;
  font-size: 11pt;
  padding: 0 30rpx 0 10px;
  margin-bottom: 10rpx;
  display: flex;
  background-color: #fff;
  min-height: 85rpx;
  border-top: 1px solid #e5e5e5;
  border-bottom: 1px solid #e5e5e5;
}
.list-btn:active {
  background-color: #fcfcfc;
}
.btn-icon {
  width: 45rpx;
  height: 45rpx;
  margin-right: 15rpx;
}
.btn-text {
  flex: 1;
  margin: 20rpx 0 15rpx;
}
.btn-open {
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-left: 10rpx;
}
.btn-open-img {
  width: 30rpx;
  height: 30rpx;
}
.issues-list {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  margin-top: 10rpx;
}
.item-labels {
  flex: 1;
}
.item-label {
  flex: 1;
  background: #7acfa6;
  color: #fff;
  font-size: 9pt;
  padding: 4rpx 10rpx;
  border-radius: 3px;
  margin: 0 5rpx;
}
.item-status {
  font-size: 10pt;
  color: #999;
}
.issues-item {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  background-color: #fff;
  margin: 10rpx 30rpx;
  font-size: 11pt;
  padding: 15rpx 25rpx;
  min-height: 100rpx;
  border-radius: 3px;
  box-shadow: 1px 2px 3px #ddd;
}
.issues-item.close {
  flex-direction: row;
  align-items: center;
}
.issues-item.close:active {
  background-color: #fcfcfc;
  opacity: 0.8;
}
.item-hd {
  display: flex;
  align-items: center;
}
.btn-id {
  flex-shrink: 0;
  color: #aaa;
  font-size: 10pt;
  margin-right: 10rpx;
}
.issues-item.close .btn-text {
  flex: 1;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  margin: 0;
}
.item-bd {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  padding: 0 10rpx 15rpx;
  font-size: 10pt;
}
.item-content {
  padding-bottom: 20rpx;
}
.item-comment {
  display: flex;
  border-top: 1rpx solid #eee;
  padding: 10rpx 5rpx;
}
.item-comment-img {
  flex-shrink: 0;
  width: 50rpx;
  height: 50rpx;
  margin: 10rpx 20rpx 10rpx 10rpx;
  border-radius: 3px;
}
.item-comment-bd {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
.item-comment-name {
  font-size: 9pt;
  color: #999;
}
.issues-label {
  font-size: 10pt;
  line-height: 100%;
  color: #999;
  margin: 25rpx 20rpx 15rpx;
}
.issues-panel {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  background-color: #fff;
  border-top: 1px solid #e5e5e5;
  border-bottom: 1px solid #e5e5e5;
}
.issues-img-panel {
  display: flex;
  flex-wrap: wrap;
  background-color: #fff;
  border-top: 1px solid #e5e5e5;
  border-bottom: 1px solid #e5e5e5;
  padding: 15rpx 25rpx;
}
.issues-img-panel.error {
  background: rgba(231, 138, 176, 0.06);
}
.issues-input {
  border-bottom: 1px solid #e5e5e5;
  padding: 15rpx 25rpx;
}
.issues-input.error {
  background: rgba(231, 138, 176, 0.06);
}
.issues-textarea {
  width: 100%;
  padding: 25rpx;
  min-height: 225rpx;
  box-sizing: border-box;
}
.issues-textarea.error {
  background: rgba(231, 138, 176, 0.06);
}
.issues-photo-item {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #888;
  margin: 20rpx;
  margin-right: 0;
  width: 135rpx;
  height: 135rpx;
  border: 1rpx solid #e5e5e5;
  border-radius: 5rpx;
}
.issues-photo-item:active {
  opacity: 0.8;
}
.issues-photo-item .remind-img {
  padding: 0;
}
.issues-photo-item image {
  width: 100%;
  height: 100%;
}
.add-photo:active {
  background: #f0f0f0;
}
.add-photo::before,
.add-photo::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  background: #e5e5e5;
}
.add-photo:active::before,
.add-photo:active::after {
  background: #ddd;
}
.add-photo::before {
  width: 10rpx;
  height: 80rpx;
  margin-top: -40rpx;
  margin-left: -5rpx;
}
.add-photo::after {
  width: 80rpx;
  height: 10rpx;
  margin-top: -5rpx;
  margin-left: -40rpx;
}
.issues-remind {
  flex: 1;
  font-size: 9pt;
  line-height: 135%;
  color: #ccc;
  padding: 0 30rpx;
  word-break: break-all;
  text-indent: 1em;
  padding-top: 30rpx;
}
.issues-remind.text-center {
  text-align: center;
}
.submit-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 40rpx 3%;
  height: 80rpx;
  border-radius: 3px;
  text-align: center;
  background-color: #0099ff;
  color: #fff;
  font-size: 12pt;
  line-height: 150%;
  padding: 0;
  border: none;
}
.submit-btn.disabled {
  opacity: 0.7;
}
.submit-btn:active {
  opacity: 0.7;
}
</style>